{
  "title": "learning-state-threads",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "Introductory paper",
      "id": 2,
      "ideas": {
        "1": {
          "title": "0. Introduction",
          "id": 6,
          "ideas": {
            "1": {
              "title": "fast and highly scalable Internet Applications",
              "id": 7
            },
            "2": {
              "title": "multithreaded programming paradigm",
              "id": 8,
              "ideas": {
                "1": {
                  "title": "one thread supports each simultaneous connection, with the performance and scalability of an event-driven state machine architecture",
                  "id": 9
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "2": {
          "title": "1. Definitions",
          "id": 10,
          "ideas": {
            "1": {
              "title": "1.1 Internet Applications",
              "id": 11,
              "ideas": {
                "1": {
                  "title": "IA",
                  "id": 12,
                  "ideas": {
                    "1": {
                      "title": "client",
                      "id": 13
                    },
                    "2": {
                      "title": "server",
                      "id": 14
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "2": {
                  "title": "IA is a data-driven application",
                  "id": 15
                },
                "3": {
                  "title": "We assume that the performance of an IA is constrained by available CPU cycles rather than network bandwidth or disk I/O",
                  "id": 16,
                  "ideas": {
                    "1": {
                      "title": "CPU is a bottleneck resource",
                      "id": 18
                    }
                  }
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "2": {
              "title": "1.2 Performance and Scalability",
              "id": 19,
              "ideas": {
                "1": {
                  "title": "performance",
                  "id": 20,
                  "ideas": {
                    "1": {
                      "title": "throughput measured in transactions per second or bytes per second",
                      "id": 22,
                      "ideas": {
                        "1": {
                          "title": "one can be converted to the other, given the average transaction size",
                          "id": 23
                        }
                      },
                      "attr": {
                        "collapsed": true,
                        "style": {}
                      }
                    },
                    "2": {
                      "title": "benchmarks to measure throughput",
                      "id": 24,
                      "ideas": {
                        "1": {
                          "title": "SPECweb96",
                          "id": 25
                        },
                        "2": {
                          "title": "WebStone",
                          "id": 26
                        },
                        "3": {
                          "title": "WebBench",
                          "id": 27
                        }
                      },
                      "attr": {
                        "collapsed": true,
                        "style": {}
                      }
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "2": {
                  "title": "scalability",
                  "id": 21,
                  "ideas": {
                    "1": {
                      "title": "the ability of an application to sustain its performance when some external condition changes",
                      "id": 28,
                      "ideas": {
                        "1": {
                          "title": "For IAs the external condition",
                          "id": 29,
                          "ideas": {
                            "1": {
                              "title": "number of clients",
                              "id": 30,
                              "ideas": {
                                "1": {
                                  "title": "users",
                                  "id": 31
                                },
                                "2": {
                                  "title": "simultaneous connections",
                                  "id": 32
                                },
                                "3": {
                                  "title": "load generators",
                                  "id": 33
                                }
                              },
                              "attr": {
                                "collapsed": true,
                                "style": {}
                              }
                            },
                            "2": {
                              "title": "underlying hardware system size",
                              "id": 34,
                              "ideas": {
                                "1": {
                                  "title": "number of CPUs",
                                  "id": 35
                                },
                                "2": {
                                  "title": "memory size",
                                  "id": 36
                                }
                              },
                              "attr": {
                                "collapsed": true,
                                "style": {}
                              }
                            }
                          },
                          "attr": {
                            "collapsed": true,
                            "style": {}
                          }
                        }
                      },
                      "attr": {
                        "collapsed": true,
                        "style": {}
                      }
                    },
                    "2": {
                      "title": "two types of scalability",
                      "id": 37,
                      "ideas": {
                        "1": {
                          "title": "load scalability",
                          "id": 38,
                          "ideas": {
                            "1": {
                              "title": "a good load scalability",
                              "id": 40,
                              "ideas": {
                                "1": {
                                  "title": "sustain its throughput over a wide range of loads",
                                  "id": 41
                                }
                              }
                            }
                          }
                        },
                        "2": {
                          "title": "system scalability",
                          "id": 39
                        }
                      },
                      "attr": {
                        "collapsed": true,
                        "style": {}
                      }
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "3": {
              "title": "1.3 Concurrency",
              "id": 42,
              "ideas": {
                "1": {
                  "title": "two unrelated types",
                  "id": 43,
                  "ideas": {
                    "1": {
                      "title": "virtual concurrency",
                      "id": 44,
                      "ideas": {
                        "1": {
                          "title": "apparent concurrency",
                          "id": 46
                        },
                        "2": {
                          "title": "the number of simultaneous connections that a system supports",
                          "id": 47
                        }
                      },
                      "attr": {
                        "style": {}
                      }
                    },
                    "2": {
                      "title": "real concurrency",
                      "id": 45,
                      "ideas": {
                        "1": {
                          "title": "the number of hardware devices, including CPUs, network cards, and disks, that actually allow a system to perform tasks in parallel",
                          "id": 48
                        }
                      }
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "2": {
                  "title": "An IA must provide virtual concurrency inorder to serve many users simultaneously.",
                  "id": 49
                },
                "3": {
                  "title": "The number of kernel execution vehicles should be dictated by the system size and not by the number of simultaneous connections.",
                  "id": 50
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "3": {
          "title": "2. Existing Architectures",
          "id": 51,
          "ideas": {
            "1": {
              "title": "2.1 Multi-Process Architecture",
              "id": 52,
              "ideas": {
                "1": {
                  "title": "MP",
                  "id": 63
                },
                "2": {
                  "title": "An individual process is dedicated to each simultaneous connection.",
                  "id": 64,
                  "ideas": {
                    "1": {
                      "title": "A proces performs all of a transaction's initialization steps and services a connection completely before moving on to service a new connection.",
                      "id": 65
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "3": {
                  "title": "User sessions in IAs are relatively independent.",
                  "id": 66,
                  "ideas": {
                    "1": {
                      "title": "Therefore, no synchronization between processes handling different connections is necessary.",
                      "id": 67
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "4": {
                  "title": "On most systems, good performance will not be achieved when more than a few hundred processes are created because of the high context-switching overhead.",
                  "id": 68,
                  "ideas": {
                    "1": {
                      "title": "In other words, MP applications have poor load scalability.",
                      "id": 69
                    },
                    "2": {
                      "title": "On the other hand, MP applications have very good system scalability, because no resources are shared among differnet processes and there is no synchronization overhead.",
                      "id": 70
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "5": {
                  "title": "The Apache Web Server 1.x uses the MP architecture.",
                  "id": 71
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "2": {
              "title": "2.2 Multi-Threaded Architecture",
              "id": 53,
              "ideas": {
                "1": {
                  "title": "MT",
                  "id": 72
                },
                "2": {
                  "title": "Like a process in the MP architecture, each thread perfoms all of a transaction's initialization steps and services a connection completely before moving on to service a new connection.",
                  "id": 73
                },
                "3": {
                  "title": "Many moder UNIX OS implement a many-to-few model when mapping user-level threads to kernel entities.",
                  "id": 74
                },
                "4": {
                  "title": "IAs are by nature network I/O driven.",
                  "id": 75
                },
                "5": {
                  "title": "In order to improve load scalability, a different type of MT architecture",
                  "id": 76,
                  "ideas": {
                    "1": {
                      "title": "one or more thread(s) per task tather than one thread per connection",
                      "id": 77
                    }
                  }
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "3": {
              "title": "2.3 Event-Driven State Machine Architecture",
              "id": 54,
              "ideas": {
                "1": {
                  "title": "EDSM",
                  "id": 78,
                  "ideas": {
                    "1": {
                      "title": "Event-Driven State Machine",
                      "id": 79
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "2": {
                  "title": "A single process is employed to concurrently process multiple connections.",
                  "id": 80,
                  "ideas": {
                    "1": {
                      "title": "basics of this architecture",
                      "id": 81,
                      "ideas": {
                        "1": {
                          "title": "Douglas E. Comer, David L. Stevens, Internetworking With TCP/IP, Vol. III: Client-Server Programming And Applications, Second Edition, Ch. 8, 12.",
                          "id": 82
                        }
                      }
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "3": {
                  "title": "The EDSM architecture performs one basic data-driven step associated with a particular connection at a time, thus multiplexing many concurrent connections.",
                  "id": 83,
                  "ideas": {
                    "1": {
                      "title": "The process operates as a state machine that receives an event and then reacts to it.",
                      "id": 84
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "4": {
                  "title": "In the idle state the EDSM calls select(2) or poll(2) to wait for network I/O events.",
                  "id": 85,
                  "ideas": {
                    "1": {
                      "title": "When a particular file descriptor is ready for I/O, the EDSM completes he corresponding basic step(usually by invoking a handler function) and starts the next one.",
                      "id": 86
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "5": {
                  "title": "non-blocking system calls to perform asyncchronous network I/O operations",
                  "id": 87,
                  "ideas": {
                    "1": {
                      "title": "W. Richard Stevens, UNIX Network Programming, Second Edition, Vol. 1, Ch. 15.",
                      "id": 88
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "6": {
                  "title": "Symmetric Multi-Process EDSM",
                  "id": 89,
                  "ideas": {
                    "1": {
                      "title": "hardware parallelism(real concurrency)",
                      "id": 90
                    },
                    "2": {
                      "title": "multiple identical processes may be created.",
                      "id": 91
                    },
                    "3": {
                      "title": "Zeus Web Server",
                      "id": 92,
                      "ideas": {
                        "1": {
                          "title": "http://www.zeus.co.uk",
                          "id": 96
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {},
                    "collapsed": true
                  }
                },
                "7": {
                  "title": "Asymmetric Multi-Process EDSM",
                  "id": 93,
                  "ideas": {
                    "1": {
                      "title": "more efficiently multiplex disk I/O",
                      "id": 94
                    },
                    "2": {
                      "title": "special \"helper\" processes may be created.",
                      "id": 95
                    },
                    "3": {
                      "title": "web server by Druschel",
                      "id": 97,
                      "ideas": {
                        "1": {
                          "title": "http://www.cs.rice.edu/~druschel/usenix99flash.ps.gz",
                          "id": 98
                        }
                      },
                      "attr": {
                        "collapsed": true,
                        "style": {}
                      }
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "8": {
                  "title": "EDSM is probably the most scalable architecture for IAs. ",
                  "id": 99
                },
                "9": {
                  "title": "MP EDSM",
                  "id": 100
                },
                "10": {
                  "title": "In effect, the EDSM architecture simulate threads and their stacks the hard way.",
                  "id": 101
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "4": {
          "title": "3. State Threads Library",
          "id": 55,
          "ideas": {
            "1": {
              "title": "3.1 State Changes and Scheduling",
              "id": 56,
              "ideas": {
                "1": {
                  "title": "two types of external events are handled by the library's scheduler, because only these events can be detected by select(2) or poll(2)",
                  "id": 102,
                  "ideas": {
                    "1": {
                      "title": "I/O events(a file descriptor is ready for I/O)",
                      "id": 103
                    },
                    "2": {
                      "title": "time events(some timeout has expired)",
                      "id": 104
                    }
                  }
                },
                "2": {
                  "title": "other types of events (such as a signal sent to a process) can also be handled by converting them to I/O events",
                  "id": 105
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "2": {
              "title": "3.2 Scalability",
              "id": 57
            },
            "3": {
              "title": "3.3 Performance",
              "id": 58
            },
            "4": {
              "title": "3.4 Portability",
              "id": 59
            },
            "5": {
              "title": "3.5 State Threads and NSPR",
              "id": 60
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "5": {
          "title": "Conclusion",
          "id": 61
        },
        "6": {
          "title": "References",
          "id": 62
        }
      },
      "attr": {
        "collapsed": true,
        "style": {}
      }
    },
    "11": {
      "title": "Complete reference",
      "id": 3,
      "ideas": {
        "1": {
          "title": "Types",
          "id": 106
        },
        "2": {
          "title": "Error Handling",
          "id": 107
        },
        "3": {
          "title": "Library Initialization",
          "id": 108
        },
        "4": {
          "title": "Thread Control and Identification",
          "id": 109
        },
        "5": {
          "title": "Per-Thread Private Data",
          "id": 110
        },
        "6": {
          "title": "Synchronization",
          "id": 111
        },
        "7": {
          "title": "Timing",
          "id": 112
        },
        "8": {
          "title": "I/O Functions",
          "id": 113
        },
        "9": {
          "title": "Program Structure",
          "id": 114
        },
        "10": {
          "title": "List of Blocking Functions",
          "id": 115
        }
      },
      "attr": {
        "collapsed": true,
        "style": {}
      }
    },
    "21": {
      "title": "Programming notes",
      "id": 4,
      "ideas": {
        "1": {
          "title": "Porting",
          "id": 116
        },
        "2": {
          "title": "Signals",
          "id": 117
        },
        "3": {
          "title": "Intra-Process Synchronization",
          "id": 118
        },
        "4": {
          "title": "Inter-Process Synchronization",
          "id": 119
        },
        "5": {
          "title": "Non-Network I/O",
          "id": 120
        },
        "6": {
          "title": "Timeouts",
          "id": 121
        }
      },
      "attr": {
        "collapsed": true,
        "style": {}
      }
    },
    "31": {
      "title": "FAQ",
      "id": 5
    }
  }
}