{
  "title": "lua语言学习",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "搭建lua开发环境和配置lua开发环境",
      "id": 2,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "<div><br></div><div>### 课程目标</div><div>* 在Mac平台下搭建Lua开发环境</div><div><br></div><div>### 重难点</div><div>* Mac下lua环境的搭建</div><div>* brew install lua</div><div>* 到官网中下载源码, 解压后进入lua目录中输入make macosx install即可.</div><div><br></div><div>### sublime text2编译lua的配置</div><div><br></div><div>* 选择Tools-Build System - NewBuildSystem, 然后输入以下, 注意lua要使用绝对路径, 保存为lua-build</div><div><div>{</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">\t</span>\"cmd\": [\"/usr/local/bin/lua\", \"$file\"],</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">\t</span>\"file_regex\": \"^(...*?):([0-9]*):?([0-9]*)\",</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">\t</span>\"selector\": \"source.lua\"</div><div>}</div></div><div><br></div><div>* 编译快捷键 cmd + b</div><div><br></div><div>### sublime text2的Package Control插件的安装</div><div>打开sublime text2, 按下control + `调出命令行然后输入</div><div><br></div><div>\n\n\n\n\n\n\n\n<p class=\"p1\"><span class=\"s1\">import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')</span></p></div><div><br></div><div></div><div>### Refs</div><div>* &lt;http://finalanubis.com/zh/2011/07/sublime-text-2-lua-developing/&gt;</div><div>* &lt;https://sublime.wbond.net/installation#st2&gt;</div>"
        },
        "style": {
          "background": "#E0E0E0"
        }
      }
    },
    "11": {
      "title": "编写自己的lua版本的HelloWorld",
      "id": 3,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "### 课程目标<div>* 用Lua编写自己的HelloWorld, 并了解Lua语言特性</div><div><br></div><div>### 重点难点</div><div>* 了解LUa的这个脚本语言与其他语言的不同之处.</div><div><br></div><div>### 课后练习</div><div>* 创建自己的HelloWorld, 并且能清晰的熟悉的说出lua的语言特性.</div><div><br></div><div>愤怒的小鸟(完全用lua开发)出来之后, lua从辅助性语言, 变成可以成为主力语言.</div><div><br></div><div>1. 不用分号<div>2. 不用花括号</div></div>"
        },
        "style": {
          "background": "#E0E0E0"
        }
      }
    },
    "21": {
      "title": "Lua语言的注释, 变量, 语句块",
      "id": 4,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "1. 不用分号<div>2. 不用花括号</div><div><br></div><div>### 课程目标</div><div>* 学习lua中注释, 变量以及语句块的含义</div><div><br></div><div>### 重难点</div><div>1. lua注释的特性</div><div>2. 变量定义与其他语言的不同之处</div><div>3. 变量的类型</div><div><br></div><div>### 课后练习</div><div>* 练习创建并使用各种变量的类型</div><div><br></div><div>### 单行注释</div><div>--这是一个lua语句</div><div><br></div><div>### 多行注释</div><div>--[[</div><div>多行注释区域</div><div>--]]</div><div><br></div><div>### 多行文本</div><div><br></div><div>```</div><div>a = [[</div><div>&lt;html&gt;</div><div>&lt;body&gt;</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>&lt;a&gt;http://www.baidu.com&lt;/a&gt;</div></blockquote></div><div>&lt;/body&gt;</div><div>&lt;/html&gt;</div><div>]]</div><div><br></div><div>print (a)</div><div>```</div><div><br></div><div>### 变量</div><div><br></div><div>a = \"I'm a \"</div><div><br></div><div>print(\"a is ==&gt;\"..a)</div><div><br></div><div>a =12</div><div>print(\"a is==?\"..a)</div><div><br></div><div>--[[</div><div>1. 数字类型</div><div>2. 字符串类型</div><div>3. thread类型</div><div>4. function</div><div>5. table</div><div>6. 其他类型</div><div>]]</div><div><br></div><div>a = function (var)</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>print(\"user input is \".. var)</div></blockquote></div><div>end</div><div><br></div><div>a(\"I'm A\")</div><div><br></div><div>-- 下面是lua中唯一一处使用中括号的地方</div><div>my_table = {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>12,</div><div>13</div></blockquote></div><div>}</div><div><br></div><div>print(my_table) -- 输出一个指针</div><div><br></div><div>for k,v in pairs(my_table) do</div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>print(k, v)</div></blockquote><div>end</div><div><br></div><div>-- 如果在一个function函数中创建的变量也是global(即没有使用local关键字), 那么意味着它也是全局的global变量.</div><div>b = \"123\" -- 默认是global, 即global b = \"123\"</div><div>local c = 12 -- 类似static, 作用域只在本文件</div>"
        },
        "style": {
          "background": "#E0E0E0"
        }
      }
    },
    "31": {
      "title": "Lua中的函数, 条件判断语句",
      "id": 5,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "<div><br></div><div>### 课程目标</div><div>* 学习lua中条件判断语句, 函数使用 的方式</div><div><br></div><div>### 重难点</div><div>1. 熟练使用lua中条件判断语句</div><div>2. 熟练创建lua中的函数</div><div>3. 了解系统库函数的由来, 并且能够知道之后是如何调用的</div><div><br></div><div>### 课后练习</div><div>* 创建多个函数进行反复练习</div><div><br></div><div>### lua程序</div><div><br></div><div>```lua</div><div><div><br></div><div>local a = 12</div><div><br></div><div>if a == 12 then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(\"a's value is 12\")</div><div>end</div><div><br></div><div>if a == 12 then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(\"value is 11\")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>elseif a ~= 11 then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>print(\"value is not 12\")</div><div>end</div><div><br></div><div><br></div><div>-- 完整的if else 语句块</div><div>if a == 2 then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(\"value is 2\")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>elseif a ==11 then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>print (\"value is 11\")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>else</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>print(\"value is \" ..a)</div><div>end</div><div><br></div><div>-- lua 中条件判断的特殊符号组合-&gt; == &gt; &lt; &gt;= &lt;= ~=(不等于)</div><div><br></div><div>local function myfunc01()</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(\"Im myfunc01\")</div><div>end</div><div><br></div><div>myfunc01()</div><div><br></div><div>local function myfunc02(a)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(a)</div><div>end</div><div><br></div><div>myfunc02(\"string\")</div><div><br></div><div>local function myfunc03(a)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>return a</div><div>end</div><div><br></div><div>print(myfunc03(123))</div><div><br></div><div>local function myfunc04()</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>return 1, 2</div><div>end</div><div><br></div><div>local a, b = myfunc04()</div><div>print(a)</div><div>print(b)</div><div><br></div><div>-- 数组遍历的第一个值为1, 美国人一周的开始是周日, 作者是巴西人一周的开始是周一</div><div>function myfunc05( ... )</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>local mtable = {...}</div><div><br></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>for k, v in pairs(mtable) do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>print(k, v)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>end</div><div><br></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print (\"get vale &nbsp;is \".. mtable[1])</div><div>end</div><div><br></div><div>myfunc05(\"12\", 123, \"ok\")</div><div><br></div></div><div>```</div>"
        },
        "style": {
          "background": "#E0E0E0"
        }
      }
    },
    "41": {
      "title": "Lua中的循环语句, 逻辑运算关键字",
      "id": 6,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "<div><br></div><div>### 课程目标</div><div>* 学习lua中循环语句与其他语言的不同之处, 并且能够理解逻辑运算符与其他语言的不同之处和使用方法.</div><div><br></div><div>### 重难点</div><div>1. 熟悉在lua中循环语句与其他语言的不同之处.</div><div>2. 了解关系运算and, or, not 在lua中所表达的特殊含义.</div><div><br></div><div>### 课后练习</div><div>* 着重练习and, or, not的用法和所表示的含义.</div><div><br></div><div>### 例子</div><div><br></div><div>```lua</div><div><div><br></div><div>-- and or not</div><div>-- lua中只有false和nil才表示为假, 0, 负数等都为真.</div><div><br></div><div>-- and 如果第一个我们需要去计算的操作数是假的话, 那么我们就返回第一个操作数, 反之, 我们就返回第二个操作数.</div><div><br></div><div>print (1 and 5)</div><div>print (0 and 5)</div><div>print (-1 and 5)</div><div><br></div><div>print (false and 5)</div><div>print (nul and 5)</div><div><br></div><div>-- or 如果第一个我们需要去计算的操作数是真的话, 那么, 我们才去返回第一个操作数, 反之, 返回第二个操作数</div><div><br></div><div>print (1 or 5)</div><div>print (0 or 5)</div><div>print (nil or 5)</div><div>print (false or 5)</div><div><br></div><div>-- not 永远返回的只是true 和 false</div><div><br></div><div>print (not nil)</div><div>print (not 1)</div><div>print (not 0)</div><div>print (not false)</div><div><br></div><div>-- while练习</div><div>m_table = {1, 2, 3}</div><div>local i = 1</div><div><br></div><div>while m_table[i] do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print (m_table[i])</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>i = i + 1 -- 没有 ++i</div><div>end</div><div><br></div><div>-- repeat(相当于其他语言中的do-while), 写法如下:</div><div><br></div><div>local snum = 1</div><div><br></div><div>repeat</div><div>print (\"snum value is \".. snum)</div><div>snum = snum + 1</div><div>until snum == 3</div><div><br></div><div>-- for</div><div><br></div><div>for i = 1, #m_table do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(m_table[i])</div><div>end</div><div><br></div><div>for i = 1, 10, 2 do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(i)</div><div>end</div></div><div><br></div><div>```</div>"
        },
        "style": {
          "background": "#E0E0E0"
        }
      }
    },
    "51": {
      "title": "Lua中Table",
      "id": 7,
      "ideas": {
        "1": {
          "title": "table用途和入门",
          "id": 8,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "### 课程目标<div>* 了解Lua中table用途和入门</div><div><br></div><div>### 重难点</div><div><br></div><div>### 掌握table的创建方式和用途</div><div><br></div><div>可以作为配置文件, 类似xml和json的功能</div><div>多数情况下当做一个数据集, 要注意加密, 防止抄袭</div><div><br></div><div>### 例子</div><div><br></div><div>```lua</div><div><div><br></div><div>-- 建立一个空的table</div><div>mytable = {}</div><div><br></div><div>-- 简历一个有数据的table</div><div>mytable2 = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>2,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>3,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>4,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>5,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>\"ok\",</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>config = {1, 2, 3},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>8</div><div>}</div><div><br></div><div>-- 大家从下面的for循环中应该能发现出几个特点</div><div>--[[</div><div>1. Lua中的table的索引不是0, 而是1!!!!</div><div>2. table的访问方式跟我们在其他语言中数组使用的方式很像.</div><div>]]</div><div>for i = 1, #mytable2 do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(mytable2[i])</div><div>end</div></div><div>```</div>"
            },
            "style": {
              "background": "#E0E0E0"
            }
          }
        },
        "2": {
          "title": "table的遍历方法",
          "id": 9,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "<div><br></div><div>### 课程目标</div><div>* 了解lua中的三种遍历方式</div><div><br></div><div>### 重难点</div><div>* 区分for --pairs和for --iparis以及普通for的区别和用法.</div><div>* 掌握table的创建方式和用途</div><div><br></div><div>### 课后练习</div><div>* 熟练的使用table的三种遍历方式</div><div><br></div><div>table是一个动态分配的对象</div><div><br></div><div>### 为什么会有这么多的遍历方式</div><div>* table的复杂性, 可以承载非常多的数据, 支持链表(list)方式, 键值对(map)的方式.</div><div><br></div><div>### 例子</div><div><br></div><div>```lua</div><div><div><br></div><div>s = \"ok\"</div><div><br></div><div>mytable = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>1,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>2,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>k = 12, -- 不是自然索引, 表示索引不连续, 没有索引</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>4, -- 索引是3</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>config = {},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>ok = 1213,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>5</div><div>}</div><div><br></div><div>mytable[s] = 10</div><div>--print (mytable[k]) --nil</div><div><br></div><div>--print (mytable[\"k\"])</div><div>--print (mytable[s])</div><div>--print(mytable.k) -- 在lua中mytable.k等价于mytable[\"k\"], 类似面向对象的用法, 是一个语法糖</div><div><br></div><div>-- a.x a[x]经常被新手弄混</div><div>--[[</div><div>a.x &lt;==&gt; a[\"x\"]</div><div>a[x] 以变量x的值来索引table</div><div>]]</div><div><br></div><div>-- 第一种遍历方式</div><div>for i = 1, #mytable do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(\"value is ==&gt;\"..mytable[i])</div><div>end</div><div><br></div><div>-- 第二种遍历方式for ipairs, ipairs迭代器使用的方式跟我们第一种普通for的方式获取的值是一样的, 都是按照当前的隐式的索引来取迭代并西那是的.</div><div>for i, v in ipairs(mytable) do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(i, v)</div><div>end</div><div><br></div><div>print(\"==============\")</div><div>-- 第三种遍历方式, pairs迭代器是完全将所有的值显示出来, 并且要注意table中索引并不完全是按照书写顺序来的, 先打印自然索引, 然后打印其它.</div><div>for k, v in pairs(mytable) do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(k, v)</div><div>end</div></div><div>```</div>"
            },
            "style": {
              "background": "#E0E0E0"
            }
          }
        },
        "3": {
          "title": "table使用实例",
          "id": 10,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "<div><br></div><div>### 课程目标</div><div>* 跟随一起学习table在真实项目中的用途</div><div><br></div><div>### 课后练习</div><div>* 练习课程中讲解table使用的方式</div><div><br></div><div><div><br></div><div>### lua的用途</div><div>1. 你可以作为第三方插件集成到项目中, 为我们的项目提供一个支持功能.</div><div>2. 你可以完全使用lua进行开发, 例如, 所知道的quick-cocos2d-x, coronaSDK</div><div>3. 当做一种数据的配置集(就是阵列)</div><div><br></div><div>-- lua当做一种配置信息的时候使用方式.</div><div>application_config = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>game_config = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>is_debug_model = false,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>is_cheat_model = true</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>},</div><div><br></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>sound_config = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>is_back_ground_music_open = true,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>is_effects_open = false</div><div>}</div><div><br></div><div><br></div><div>}</div><div><br></div><div>-- 数据阵列</div><div><br></div><div><div><br></div><div>### lua的用途</div><div>1. 你可以作为第三方插件集成到项目中, 为我们的项目提供一个支持功能.</div><div>2. 你可以完全使用lua进行开发, 例如, 所知道的quick-cocos2d-x, coronaSDK</div><div>3. 当做一种数据的配置集(就是阵列)</div><div><br></div><div>-- lua当做一种配置信息的时候使用方式.</div><div>application_config = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>game_config = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>is_debug_model = false,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>is_cheat_model = true</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>},</div><div><br></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>sound_config = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>is_back_ground_music_open = true,</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>is_effects_open = false</div><div>}</div><div><br></div><div><br></div><div>}</div><div><br></div><div>-- 数据阵列</div><div><br></div><div>enemy_waves = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{enter_id = 1, info_id = 1},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{enter_id = 2, info_id = 1},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{enter_id = 2, info_id = 2},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{enter_id = 2, info_id = 2},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{enter_id = 1, info_id = 2},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{enter_id = 1, info_id = 1}</div><div>}</div><div><br></div><div>enemy_datas = {</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{max_hp = 100, damage = 100, is_have_special_effect = true},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{max_hp = 100, damage = 100, is_have_special_effect = true},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{max_hp = 100, damage = 100, is_have_special_effect = true},</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>{max_hp = 100, damage = 100, is_have_special_effect = true}</div><div><br></div><div>}</div><div><br></div><div>for k,v in pairs(enemy_datas) do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>print(k,v)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>if type(v) == \"table\" then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>for ik,iv in pairs(v) do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t</span></span>print(ik,iv)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>end</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t</span></span>print(\"=======\")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>end</div><div>end</div><div><br></div></div></div>"
            },
            "style": {
              "background": "#E0E0E0"
            }
          }
        }
      }
    },
    "61": {
      "title": "lua读取数据文件",
      "id": 11,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "<div><br></div><div>### 课程目标</div><div>* 学习lua中读写外部的数据文件</div><div><br></div><div>### 重难点</div><div>1. 写文件的方式</div><div>file = io.open(\"t.txt\", \"a\")</div><div>my_text = \"hello\"</div><div>file:write(my_text)</div><div>file:close()</div><div><br></div><div>2. 读取文件的方式</div><div>local f = assert(io.open(file_name, 'r'))</div><div>local string = f:read(\"*all\")</div><div>f:close()</div><div><br></div><div>### 课后练习</div><div>* 对读写文件多加练习</div><div><br></div><div>### 例子</div><div><br></div><div>-- namelist.txt</div><div><br></div><div><div>1. sandy</div><div>2. longlingxiu</div><div>3. Jack</div><div>4. mike</div></div><div><br></div><div>-- read.lua</div><div><br></div><div><div><br></div><div>-- io.open 一种面向对象的用法, io为一个table, open为table中的一个方法.</div><div>-- r表示读取的权限, 如果你写入a表示追加(append), w表示写入(write), b表示打开二进制(binary)</div><div>local f = assert(io.open(\"namelist.txt\", 'r')) -- 相当于获取流的指针, 句柄, 对象.</div><div><br></div><div>local string = f:read(\"*all\")</div><div><br></div><div>f:close() -- close关闭流</div><div><br></div><div>print(string)</div><div><br></div><div>local function read_files(file_name)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>local f = assert(io.open(file_name, 'r'))</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>-- 表示读取所有的文件内容, 你也可以选择*line表示读取一行, 或者*number读取一个数字或者&lt;num&gt;读取一个不超过&lt;num&gt;的长度的字符</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>local content = f:read(\"*all\")&nbsp;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>f:close()</div><div><br></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>return content</div><div>end</div><div><br></div><div>local rlt = read_files(\"namelist.txt\")</div><div>print(rlt)</div></div><div><br></div><div>-- write.lua</div><div><br></div><div><div>--[[</div><div>local f = assert(io.open(\"ok.txt\", 'w'))</div><div><br></div><div>f:write(\"welcome to lua\\n 欢迎收看cocos2d-x的视频\\n\")</div><div><br></div><div>f:close()</div><div>]]</div><div><br></div><div><br></div><div>local function write_content(file_name, content)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>-- 根据需要读写的文件目录去写入文件</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>local f = assert(io.open(file_name, 'w'))</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>f:write(content)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>f:close()</div><div>end</div><div><br></div><div>write_content(\"ok.txt\", \"hello Akagi201\")</div><div><br></div><div>local long_string = [[</div><div><br></div><div>sdfasdfaf</div><div>fasdfasf</div><div>sadfasf我</div><div>第三方沙发</div><div><br></div><div>]]</div><div><br></div><div>write_content(\"ok.txt\", long_string)</div></div>"
        },
        "style": {
          "background": "#E0E0E0"
        }
      }
    },
    "71": {
      "title": "lua中的串行化",
      "id": 12,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "<div><br></div><div>### 课程目标</div><div>* 学习lua中串行化Serialization</div><div><br></div><div>### 重难点</div><div>* 实现的方式</div><div><br></div><div>### 课后练习</div><div>* 对串行化进行理解并且多加练习</div><div><br></div><div>### 例子</div><div><br></div><div>```</div><div><div><br></div><div>function serialize(o)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>if type(o) == \"number\" then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>io.write(o)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>elseif type(o) == \"string\" then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t</span></span>--todo</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t</span></span>--io.write(\"'\", o, \"'\")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t</span></span>io.write(\"[[\", o, \"]]\")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>else -- 其他情况</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>end</div><div>end</div><div><br></div><div><br></div><div>a = 'a \"programing lua\" \\\\'</div><div><br></div><div>print(string.format(\"%q\", a))</div><div><br></div><div><br></div><div>-- [=[...]=] -- ...为字符串, lua5.1提供</div><div><br></div><div>-- 保存无环的table</div><div>function n_serialize(o)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>if type(o) == \"number\" then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>io.write(o)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t</span></span>elseif type(o) == \"string\" then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t</span></span>--todo</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t</span></span>io.write(string.format(\"%q\", o))</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t</span></span>elseif type(o) == \"table\" then</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t\t</span></span>io.write(\"{\\n\")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t\t</span></span>for k,v in pairs(o) do</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t\t\t</span></span>io.write(\" \", k, \" = \")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t\t\t</span></span>n_serialize(v)</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t\t\t</span></span>io.write(\",\\n\")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t\t</span></span>end</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t\t</span></span>io.write(\"}\\n\")</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t\t\t</span></span>else</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\"><span style=\"white-space: normal;\">\t</span></span>end</div><div>end</div><div><br></div><div>serialize(\"ok\")</div><div>serialize(12)</div><div>n_serialize{a = 12, b = 'lua'}</div></div><div><br></div><div>```</div>"
        },
        "style": {
          "background": "#E0E0E0"
        }
      }
    }
  }
}