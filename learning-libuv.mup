{
  "title": "learning-libuv",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "Introduction",
      "id": 2,
      "ideas": {
        "1": {
          "title": "Who this book is for",
          "id": 11,
          "ideas": {
            "1": {
              "title": "A system programmer",
              "id": 12,
              "ideas": {
                "1": {
                  "title": "low-level programs",
                  "id": 13,
                  "ideas": {
                    "1": {
                      "title": "daemons",
                      "id": 14
                    },
                    "2": {
                      "title": "network services and clients",
                      "id": 15
                    }
                  }
                }
              },
              "attr": {
                "style": {}
              }
            },
            "2": {
              "title": "A node.js module writer",
              "id": 16
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "2": {
          "title": "Background",
          "id": 17,
          "ideas": {
            "1": {
              "title": "kernel event notification mechanism",
              "id": 18,
              "ideas": {
                "1": {
                  "title": "linux",
                  "id": 19,
                  "ideas": {
                    "1": {
                      "title": "kqueue",
                      "id": 21
                    },
                    "2": {
                      "title": "(e)poll",
                      "id": 22
                    }
                  }
                },
                "2": {
                  "title": "win",
                  "id": 20,
                  "ideas": {
                    "1": {
                      "title": "IOCP",
                      "id": 23
                    }
                  }
                }
              }
            },
            "2": {
              "title": "The first independently release version of libuv was 0.10.2",
              "id": 25
            }
          },
          "attr": {
            "style": {}
          }
        },
        "3": {
          "title": "Code",
          "id": 26,
          "ideas": {
            "1": {
              "title": "https://github.com/nikhilm/uvbook",
              "id": 27
            }
          }
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "11": {
      "title": "Basics of libuv",
      "id": 3,
      "ideas": {
        "1": {
          "title": "Event loops",
          "id": 28,
          "ideas": {
            "1": {
              "title": "In event-driven programming, an application expresses interest in certain events and respond to them when they occur.",
              "id": 40
            },
            "2": {
              "title": "The responsibility of gathering events from the operating system or monitoring other sources of events is handled by libuv, and the user can register callbacks to be invoked when an event occurs.",
              "id": 41
            },
            "4": {
              "title": "some examples of events",
              "id": 43,
              "ideas": {
                "1": {
                  "title": "File is ready for writing",
                  "id": 44
                },
                "2": {
                  "title": "A socket has data ready to be read",
                  "id": 45
                },
                "3": {
                  "title": "A timer has timed out",
                  "id": 46
                }
              },
              "attr": {
                "style": {},
                "collapsed": true
              }
            },
            "5": {
              "title": "Solve blocking roadblock",
              "id": 47,
              "ideas": {
                "1": {
                  "title": "use threads",
                  "id": 48,
                  "ideas": {
                    "1": {
                      "title": "Each blocking I/O operation is started in a separate thread (or in a thread pool)",
                      "id": 49
                    },
                    "2": {
                      "title": "When the blocking function gets invoked in the thread, the processor can schedule another thread to run, which actually needs the CPU.",
                      "id": 50
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "2": {
                  "title": "asynchronous, non-blocking",
                  "id": 51,
                  "ideas": {
                    "1": {
                      "title": "Most modern operating systems provide event notification subsystems",
                      "id": 52,
                      "ideas": {
                        "1": {
                          "title": "For example, a normal read call on a socket would block until the sender actually sent something.",
                          "id": 53,
                          "ideas": {
                            "1": {
                              "title": "Instead, the application can request the operating system to watch the socket and put an event notification in the queue.",
                              "id": 54,
                              "ideas": {
                                "1": {
                                  "title": "The application can inspect the events at its convenience(perhaps doing some number crunching before to use the processor to the maximum) and grab the data",
                                  "id": 55
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "2": {
                      "title": "It is asynchronous because",
                      "id": 56,
                      "ideas": {
                        "1": {
                          "title": "the application expressed interest at one point, then used the data at another point(in time and space)",
                          "id": 57
                        }
                      }
                    },
                    "3": {
                      "title": "It is non-blocking because",
                      "id": 59,
                      "ideas": {
                        "1": {
                          "title": "the application process was free to do other tasks.",
                          "id": 60
                        }
                      }
                    },
                    "4": {
                      "title": "Due to the way our computer hardware works, with the thread as the basic unit of the processor, libuv and OSes will usually run background/worker threads and/or polling to perform tasks in a non-blocking manner.",
                      "id": 61
                    }
                  }
                }
              },
              "attr": {
                "style": {},
                "collapsed": true
              }
            },
            "6": {
              "title": "Default loop",
              "id": 62,
              "ideas": {
                "1": {
                  "title": "A default loop is provided by libuv and can be accessed using uv_default_loop()",
                  "id": 63
                },
                "2": {
                  "title": "You should use this loop if you only want a single loop.",
                  "id": 64
                },
                "3": {
                  "title": "node.js uses the default loop as its main loop.",
                  "id": 65
                }
              },
              "attr": {
                "style": {},
                "collapsed": true
              }
            },
            "2.5": {
              "title": "This event loop is encapsulated by uv_run()",
              "id": 167,
              "ideas": {
                "1": {
                  "title": "the end-all function when using libuv",
                  "id": 168
                }
              }
            },
            "4.5": {
              "title": "The event-loop usually keeps running forever.",
              "id": 42,
              "attr": {
                "style": {}
              }
            }
          },
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "<div>in pseudocode</div><div><br></div><div>```</div><div>while there are still events to process:</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>e = get the next event</div><div>if there is a callback associated with e:</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>call the callback</div></blockquote></div></blockquote><div>```</div>"
            },
            "style": {},
            "collapsed": true
          }
        },
        "3": {
          "title": "Error handling",
          "id": 66,
          "ideas": {
            "1": {
              "title": "libuv functions which may fail return -1 on error.",
              "id": 67
            },
            "2": {
              "title": "The error code itself is set on the event loop as last_err",
              "id": 68,
              "ideas": {
                "1": {
                  "title": "Use uv_last_error(loop) to get a uv_err_t which has a code member with the error code.",
                  "id": 69,
                  "attr": {
                    "style": {}
                  }
                },
                "2": {
                  "title": "code is an enumeration of UV_*",
                  "id": 70
                }
              }
            },
            "3": {
              "title": "get teh description of the error",
              "id": 71,
              "ideas": {
                "1": {
                  "title": "uv_strerror(uv_err_t)",
                  "id": 72
                },
                "2": {
                  "title": "uv_err_name(uv_err_t)",
                  "id": 73
                }
              }
            },
            "4": {
              "title": "Async callbacks have a status argument as the last argument.",
              "id": 74,
              "ideas": {
                "1": {
                  "title": "Use this instead of the return value.",
                  "id": 75
                }
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "4": {
          "title": "Watchers",
          "id": 76,
          "ideas": {
            "1": {
              "title": "Watchers are how  users of libuv express interest in particular events.",
              "id": 77
            },
            "2": {
              "title": "Watchers are opaque structs named as uv_TYPE_t where type signifies what the watcher is used for.",
              "id": 78
            },
            "3": {
              "title": "All watcher structs are subclasses of uv_handle_t and often referred to as handles in libuv and in this text.",
              "id": 79
            },
            "4": {
              "title": "Watchers are setup by a corresponding",
              "id": 80,
              "ideas": {
                "1": {
                  "title": "uv_TYPE_init(uv_TYPE_t *)",
                  "id": 81
                },
                "2": {
                  "title": "Some watcher initialization functions require the loop as a first argument.",
                  "id": 82
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "5": {
              "title": "A watcher is set to actually listen for events by invoking",
              "id": 83,
              "ideas": {
                "1": {
                  "title": "uv_TYPE_start(uv_TYPE_t *, callback)",
                  "id": 84
                }
              }
            },
            "6": {
              "title": "and stopped by calling the corresponding",
              "id": 85,
              "ideas": {
                "1": {
                  "title": "uv_TYPE_stop(uv_TYPE_t *)",
                  "id": 86
                }
              }
            },
            "7": {
              "title": "Callbacks are functions which are called by libuv whenever an event the watcher is interested in has taken place.",
              "id": 87
            },
            "8": {
              "title": "Application specific logic will usually be implemented in the callback.",
              "id": 88
            },
            "9": {
              "title": "Idling",
              "id": 90,
              "attr": {
                "style": {}
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "0.5": {
          "title": "Feature",
          "id": 32,
          "attr": {
            "style": {},
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "enforces an asynchronous, event-driven style of programming.",
              "id": 33
            },
            "2": {
              "title": "Its core job is to provide an event loop and callback based notifications of I/O and other activities.",
              "id": 34
            },
            "3": {
              "title": "libuv offers core utilities",
              "id": 35,
              "ideas": {
                "1": {
                  "title": "timers",
                  "id": 36
                },
                "2": {
                  "title": "non-blocking network support",
                  "id": 37
                },
                "3": {
                  "title": "asynchronous file system access",
                  "id": 38
                },
                "4": {
                  "title": "child processes",
                  "id": 39
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            }
          }
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "21": {
      "title": "Filesystem",
      "id": 4,
      "ideas": {
        "1": {
          "title": "Simple filesystem read/write is achieved using the uv_fs_* functions and the uv_fs_t struct",
          "id": 91
        },
        "2": {
          "title": "The libuv filesystem operations are different from socket operations.",
          "id": 92,
          "ideas": {
            "1": {
              "title": "Socket operations use the non-blocking operations provided by the operating system.",
              "id": 93
            },
            "2": {
              "title": "Filesystem operations use blocking functions internally, but invoke these functions in a thread pool and notify watchers registered with the event loop when application interaction is required.",
              "id": 94
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "3": {
          "title": "All filesystem functions have two forms",
          "id": 95,
          "ideas": {
            "1": {
              "title": "synchronous",
              "id": 96,
              "ideas": {
                "1": {
                  "title": "automatically get called(and block) if no callback is specified.",
                  "id": 98,
                  "ideas": {
                    "1": {
                      "title": "The return value of functions is the equivalent Unix return value(usually 0 on success, -1 on error)",
                      "id": 99
                    }
                  }
                }
              }
            },
            "2": {
              "title": "asynchronous",
              "id": 97,
              "ideas": {
                "1": {
                  "title": "called when a callback is passed and the return value is 0",
                  "id": 100
                }
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "4": {
          "title": "Reading  / Writing files",
          "id": 101,
          "ideas": {
            "1": {
              "title": "file descriptor is obtained",
              "id": 102,
              "ideas": {
                "1": {
                  "title": "uv_fs_open",
                  "id": 103
                }
              }
            },
            "2": {
              "title": "file descriptor is closed",
              "id": 104,
              "ideas": {
                "1": {
                  "title": "uv_fs_close",
                  "id": 105
                }
              }
            },
            "3": {
              "title": "The result field of a uv_fs_t is the file descriptor in case of the uv_fs_open callback.",
              "id": 108
            },
            "4": {
              "title": "uv_fs_req_cleanup() function must be called to free internal memory allocations in libuv",
              "id": 109
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "5": {
          "title": "Filesystem operations",
          "id": 110,
          "ideas": {
            "1": {
              "title": "unlink",
              "id": 169
            },
            "2": {
              "title": "rmdir",
              "id": 170
            },
            "3": {
              "title": "stat",
              "id": 171
            },
            "4": {
              "title": "have intuitive argument order",
              "id": 172
            },
            "5": {
              "title": "returning result in uv_fs_t.result",
              "id": 173
            },
            "6": {
              "title": "Callbacks should free the  uv_fs_t argument using uv_fs_req_cleanup()",
              "id": 174
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "6": {
          "title": "Buffers and Streams",
          "id": 111,
          "ideas": {
            "1": {
              "title": "The basic I/O tool in libuv is the stream(uv_stream_t)",
              "id": 175,
              "ideas": {
                "1": {
                  "title": "TCP sockets",
                  "id": 177
                },
                "2": {
                  "title": "UDP sockets",
                  "id": 178
                },
                "3": {
                  "title": "pipes for file I/O",
                  "id": 179
                },
                "4": {
                  "title": "IPC",
                  "id": 180
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "2": {
              "title": "operate stream",
              "id": 181,
              "ideas": {
                "1": {
                  "title": "uv_read_start",
                  "id": 182,
                  "ideas": {
                    "1": {
                      "title": "keep reading from a stream",
                      "id": 185
                    }
                  }
                },
                "2": {
                  "title": "uv_read_stop",
                  "id": 183
                },
                "3": {
                  "title": "uv_write",
                  "id": 184
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "3": {
              "title": "discrete unit of data is the buffer",
              "id": 186,
              "ideas": {
                "1": {
                  "title": "uv_buf_t",
                  "id": 187
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "7": {
          "title": "File change events",
          "id": 112,
          "ideas": {
            "1": {
              "title": "libuv wraps common file change notification libraries",
              "id": 188,
              "ideas": {
                "1": {
                  "title": "Linux",
                  "id": 189,
                  "ideas": {
                    "1": {
                      "title": "inotify",
                      "id": 190
                    }
                  }
                },
                "2": {
                  "title": "Darwin",
                  "id": 191,
                  "ideas": {
                    "1": {
                      "title": "FSEvents",
                      "id": 192
                    }
                  }
                },
                "3": {
                  "title": "BSDs",
                  "id": 193,
                  "ideas": {
                    "1": {
                      "title": "kqueue",
                      "id": 194
                    }
                  }
                },
                "4": {
                  "title": "Windows",
                  "id": 195,
                  "ideas": {
                    "1": {
                      "title": "ReadDirectoryChangesW",
                      "id": 197
                    }
                  }
                },
                "5": {
                  "title": "Solaris",
                  "id": 198,
                  "ideas": {
                    "1": {
                      "title": "event ports",
                      "id": 199
                    }
                  }
                },
                "6": {
                  "title": "Cygwin",
                  "id": 200,
                  "ideas": {
                    "1": {
                      "title": "unsupported",
                      "id": 201
                    }
                  }
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "31": {
      "title": "Networking",
      "id": 5,
      "ideas": {
        "1": {
          "title": "TCP",
          "id": 113,
          "ideas": {
            "1": {
              "title": "Server",
              "id": 202,
              "ideas": {
                "1": {
                  "title": "uv_tcp_init",
                  "id": 203
                },
                "2": {
                  "title": "uv_tcp_bind",
                  "id": 204
                },
                "3": {
                  "title": "uv_listen",
                  "id": 205
                },
                "4": {
                  "title": "uv_accept",
                  "id": 206
                },
                "5": {
                  "title": "stream operations",
                  "id": 207
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "2": {
              "title": "Client",
              "id": 208,
              "ideas": {
                "1": {
                  "title": "uv_tcp_connect",
                  "id": 209,
                  "ideas": {
                    "1": {
                      "title": "bind/listen/accept",
                      "id": 210
                    }
                  }
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "2": {
          "title": "UDP",
          "id": 114,
          "ideas": {
            "1": {
              "title": "UDP Options",
              "id": 212,
              "ideas": {
                "1": {
                  "title": "Time-to-live",
                  "id": 213,
                  "ideas": {
                    "1": {
                      "title": "uv_udp_set_ttl",
                      "id": 214
                    }
                  }
                },
                "2": {
                  "title": "IPv6 stack only",
                  "id": 215,
                  "ideas": {
                    "2": {
                      "title": "uv_udp_bind6",
                      "id": 217,
                      "ideas": {
                        "1": {
                          "title": "UV_UDP_IPV6ONLY",
                          "id": 216,
                          "attr": {
                            "style": {}
                          }
                        }
                      }
                    }
                  }
                },
                "3": {
                  "title": "Multicast",
                  "id": 218,
                  "ideas": {
                    "1": {
                      "title": "(un)subscribe to a multicast group",
                      "id": 219,
                      "ideas": {
                        "1": {
                          "title": "uv_udp_open",
                          "id": 220,
                          "ideas": {
                            "1": {
                              "title": "membership",
                              "id": 222,
                              "ideas": {
                                "1": {
                                  "title": "UV_JOIN_GROUP",
                                  "id": 223
                                },
                                "2": {
                                  "title": "UV_LEAVE_GROUP",
                                  "id": 224
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "2": {
                      "title": "local loopback",
                      "id": 225,
                      "ideas": {
                        "1": {
                          "title": "uv_udp_set_multicast_loop",
                          "id": 226
                        }
                      }
                    },
                    "3": {
                      "title": "TTL",
                      "id": 227,
                      "ideas": {
                        "1": {
                          "title": "uv_udp_set_multicast_ttl",
                          "id": 228
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "3": {
          "title": "Querying DNS",
          "id": 115
        },
        "4": {
          "title": "Network interfaces",
          "id": 116
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "41": {
      "title": "Threads",
      "id": 6,
      "ideas": {
        "1": {
          "title": "Core thread operations",
          "id": 117,
          "ideas": {}
        },
        "2": {
          "title": "Synchronization Primitives",
          "id": 118,
          "ideas": {
            "1": {
              "title": "Mutexes",
              "id": 235
            },
            "2": {
              "title": "Locks",
              "id": 236
            },
            "3": {
              "title": "semaphores",
              "id": 237
            },
            "4": {
              "title": "condition variables",
              "id": 238
            },
            "5": {
              "title": "barriers",
              "id": 239
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "3": {
          "title": "libuv work queue",
          "id": 119
        },
        "4": {
          "title": "Inter-thread communication",
          "id": 120
        },
        "0.5": {
          "title": "features",
          "id": 229,
          "attr": {
            "style": {},
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "two predominant thread libraries",
              "id": 230,
              "ideas": {
                "1": {
                  "title": "Windows threads implementation",
                  "id": 231
                },
                "2": {
                  "title": "pthreads",
                  "id": 232
                }
              }
            },
            "2": {
              "title": "assumption",
              "id": 233,
              "ideas": {
                "1": {
                  "title": "There is only one event loop, running in one thread(the main thread)",
                  "id": 234
                }
              }
            }
          }
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "51": {
      "title": "Processes",
      "id": 7,
      "ideas": {
        "1": {
          "title": "Spawning child processes",
          "id": 121,
          "ideas": {
            "1": {
              "title": "Since uv_spawn uses execvp internally, there is no need to supply the full path.",
              "id": 240
            },
            "2": {
              "title": "The arguments array has to be one larger than the number of arguments, with the last element being NULL.",
              "id": 241
            },
            "3": {
              "title": "After the call to uv_spawn, uv_process_t.pid will contain the process ID of the child process.",
              "id": 242
            },
            "4": {
              "title": "The exit callback will be invoked with the exit status and the type of signal which caused the exit.",
              "id": 243
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "2": {
          "title": "Changing process parameters",
          "id": 122,
          "ideas": {
            "1": {
              "title": "Before the child process is launched you can control the execution environment using fields in uv_process_options_t.",
              "id": 145
            },
            "2": {
              "title": "Change execution directory",
              "id": 146,
              "ideas": {
                "1": {
                  "title": "uv_process_options_t.cwd",
                  "id": 147
                }
              },
              "attr": {
                "style": {}
              }
            },
            "3": {
              "title": "Set environment variables",
              "id": 148,
              "ideas": {
                "3": {
                  "title": "uv_process_options_t.env",
                  "id": 244
                }
              },
              "attr": {
                "style": {}
              }
            },
            "4": {
              "title": "Options flags",
              "id": 151,
              "ideas": {
                "1": {
                  "title": "Setting uv_process_options.flags to a bitwise OR of the following flags, modifies the child process behaviour",
                  "id": 152,
                  "ideas": {
                    "1": {
                      "title": "UV_PROCESS_SETUID",
                      "id": 154,
                      "ideas": {
                        "1": {
                          "title": "sets the child's execution user ID to uv_process_options_t.uid",
                          "id": 155
                        }
                      }
                    },
                    "2": {
                      "title": "UV_PROCESS_SETGID",
                      "id": 156,
                      "ideas": {
                        "1": {
                          "title": "sets the child's execution group ID to uv_process_options_t.gid",
                          "id": 157
                        }
                      }
                    }
                  }
                },
                "2": {
                  "title": "Changing the UID/GID is only supported on Unix, uv_spawn will fail on Windows with UV_ENOTSUP",
                  "id": 158,
                  "ideas": {
                    "1": {
                      "title": "UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS",
                      "id": 159,
                      "ideas": {
                        "1": {
                          "title": "No quoting or escaping of uv_process_options_t.args is done on Windows. Ignored on Unix.",
                          "id": 160
                        }
                      }
                    },
                    "2": {
                      "title": "UV_PROCESS_DETACHED",
                      "id": 161,
                      "ideas": {
                        "1": {
                          "title": "Starts the child process in a new session, which will keep running after the parent process exits.",
                          "id": 162
                        }
                      }
                    }
                  }
                }
              },
              "attr": {
                "style": {},
                "collapsed": true
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "3": {
          "title": "Detaching processes",
          "id": 123,
          "ideas": {
            "2": {
              "title": "daemon",
              "id": 245
            },
            "3": {
              "title": "UV_PROCESS_DETACHED",
              "id": 246
            },
            "4": {
              "title": "uv_unref()",
              "id": 247,
              "ideas": {
                "1": {
                  "title": "more fire-and-forget",
                  "id": 248
                }
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "4": {
          "title": "Sending signals to processes",
          "id": 124,
          "ideas": {
            "1.5": {
              "title": "Unix",
              "id": 249,
              "ideas": {
                "1": {
                  "title": "kill",
                  "id": 251
                }
              }
            },
            "1.75": {
              "title": "windows",
              "id": 250,
              "ideas": {
                "1": {
                  "title": "one caveat",
                  "id": 252,
                  "ideas": {
                    "1": {
                      "title": "All of SIGTERM, SIGINT and SIGKILL lead to termination of the process.",
                      "id": 253,
                      "ideas": {}
                    }
                  }
                }
              }
            },
            "1.875": {
              "title": "uv_kill",
              "id": 255
            },
            "1.9375": {
              "title": "uv_process_kill",
              "id": 256
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "5": {
          "title": "Signals",
          "id": 125,
          "ideas": {
            "1": {
              "title": "the API deliver signals to all handlers on all running event loops!",
              "id": 257
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "6": {
          "title": "Child Process I/O",
          "id": 126
        },
        "7": {
          "title": "Pipes",
          "id": 127,
          "ideas": {
            "1": {
              "title": "Parent-child IPC",
              "id": 258
            },
            "2": {
              "title": "Arbitrary process IPC",
              "id": 259
            },
            "3": {
              "title": "Sending file descriptors over pipes",
              "id": 260
            }
          }
        },
        "0.5": {
          "title": "libuv offers considerable child process management, abstracting the platform differences and allowing communication with the child processes using streams or named pipes",
          "id": 139
        },
        "0.75": {
          "title": "A multi-process model with messages may also be easier to reason about compared to one with threads and shared memory.",
          "id": 140,
          "attr": {
            "style": {}
          }
        },
        "0.875": {
          "title": "A common refrain against event-based programs is that they cannot take advantage of multiple cores in modern computers.",
          "id": 141,
          "ideas": {
            "1": {
              "title": "In a multi-threaded program the kernel can perform scheduling and assign different threads to different cores, improving performance.",
              "id": 142
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "0.9375": {
          "title": "But an event loop has only one thread.",
          "id": 143,
          "ideas": {
            "1": {
              "title": "The workaround can be to launch multiple processes instead, with each process running an event loop, and each process getting assigned to a separate CPU core.",
              "id": 144
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "61": {
      "title": "Advanced event loops",
      "id": 8,
      "ideas": {
        "1": {
          "title": "Stopping an event loop",
          "id": 128
        },
        "2": {
          "title": "Embedding libuv's event loop in other libraries",
          "id": 129
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "71": {
      "title": "Utilities",
      "id": 9,
      "ideas": {
        "1": {
          "title": "Timers",
          "id": 130
        },
        "2": {
          "title": "Event loop reference count",
          "id": 131
        },
        "3": {
          "title": "Idle watcher pattern",
          "id": 132
        },
        "4": {
          "title": "Passing data to worker thread",
          "id": 133
        },
        "5": {
          "title": "External I/O with polling",
          "id": 134
        },
        "6": {
          "title": "Check & Prepare watchers",
          "id": 135
        },
        "7": {
          "title": "Loading libraries",
          "id": 136
        },
        "8": {
          "title": "TTY",
          "id": 137
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "81": {
      "title": "About",
      "id": 10,
      "ideas": {
        "1": {
          "title": "Licensing",
          "id": 138
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    }
  },
  "links": []
}