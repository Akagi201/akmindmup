{
  "title": "Learning Swift",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "学习新编程语言的方法-纯经验分享",
      "id": 2,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "## 学习目标<div>学会一种新方法, 适用于各种计算机语言的学习.</div><div><br></div><div>## 重点难点</div><div>理解纵横坐标轴</div><div><br></div><div>## 课后练习</div><div>选择一门你没有接触过的新语言, 画出坐标图, 比如Java, Python, Ruby等等.</div>"
        },
        "style": {},
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Sundy坐标系学习法 - 专利哦",
          "id": 3
        },
        "2": {
          "title": "两句话学会新语言",
          "id": 4,
          "ideas": {
            "1": {
              "title": "程序=数据结构+算法",
              "id": 5
            },
            "2": {
              "title": "从面向过程到面向对象",
              "id": 6
            }
          }
        },
        "3": {
          "title": "Swift语言坐标系",
          "id": 7
        }
      }
    },
    "11": {
      "title": "1. 为何要学习Swift?",
      "id": 8,
      "ideas": {
        "1": {
          "title": "是因为简单易学吗?",
          "id": 9
        },
        "2": {
          "title": "说说WWDC2014开发者大会",
          "id": 10,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "1. 输入法支持第三方, 只是开放的第一步<div>2. iCloud</div><div>3. HealthKit, HomeKit</div><div>4. Swift</div>"
            },
            "style": {}
          }
        },
        "3": {
          "title": "猜猜Apple的意图",
          "id": 11
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "21": {
      "title": "2. 爱因斯坦小板凳HelloWorld开发环境搭建",
      "id": 12,
      "ideas": {
        "1": {
          "title": "2.1 目前是Beta3版本, 需要什么条件才能安装呢?",
          "id": 13,
          "ideas": {
            "1": {
              "title": "OS X v10.9.3(Mavericks) Later",
              "id": 16
            },
            "2": {
              "title": "Developer Account",
              "id": 17
            },
            "3": {
              "title": "开发者账号注册",
              "id": 30
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "3": {
          "title": "2.2 下载和安装XCode6 & iOS SDK",
          "id": 15,
          "ideas": {
            "1": {
              "title": "运行第一个自己的HelloWorld程序",
              "id": 18
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "4": {
          "title": "2.3 工欲善其事必先利其器-Playground",
          "id": 31,
          "ideas": {
            "1": {
              "title": "Xcode的新Playground的作用",
              "id": 32
            },
            "2": {
              "title": "Playground的设计结构",
              "id": 33
            },
            "3": {
              "title": "建立方式2种",
              "id": 34,
              "ideas": {
                "1": {
                  "title": "直接创建",
                  "id": 36
                },
                "2": {
                  "title": "在一个项目里创建",
                  "id": 37
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "4": {
              "title": "演示",
              "id": 35,
              "ideas": {
                "1": {
                  "title": "常量变量",
                  "id": 38
                },
                "2": {
                  "title": "循环控制及数据变化走向",
                  "id": 39
                },
                "3": {
                  "title": "图形预览",
                  "id": 40
                }
              }
            },
            "5": {
              "title": "优点和缺点的总结",
              "id": 41
            }
          },
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "## 学习目标<div>* 掌握Playground的使用</div><div><br></div><div>## 重点难点</div><div>* Playground的熟练使用</div><div>* Playground的优缺点</div><div><br></div><div>## 课后练习</div><div>* 进行本课程的演示练习</div>"
            },
            "style": {},
            "collapsed": true
          }
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    },
    "31": {
      "title": "3. Swift坐标系图谱",
      "id": 19,
      "ideas": {
        "1": {
          "title": "1. 面向过程-数据结构",
          "id": 20,
          "ideas": {
            "1": {
              "title": "3.1 常量/变量",
              "id": 22,
              "ideas": {
                "1": {
                  "title": "声明",
                  "id": 26
                },
                "2": {
                  "title": "类型标定, 指定强类型",
                  "id": 27
                },
                "3": {
                  "title": "命名和值的字符",
                  "id": 28
                },
                "4": {
                  "title": "输出",
                  "id": 29
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 学会Swift中的常量变量命名和赋值.</div><div><br></div><div>## 重点难点</div><div>* 了解Swift的命名规则.</div><div><br></div><div>## 课后练习</div><div>* 建立一个强类型的Float常量, 并且赋值4.3.</div><div>* 将上一步的变量常量进行运算, 并且输出.</div>"
                },
                "style": {},
                "collapsed": true
              }
            },
            "2": {
              "title": "3.2 注释和分号",
              "id": 23
            },
            "4": {
              "title": "3.3 基本数据类型",
              "id": 25,
              "ideas": {
                "1": {
                  "title": "整数",
                  "id": 42,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "Int, UInt, Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64"
                    },
                    "style": {}
                  },
                  "ideas": {
                    "1": {
                      "title": "可选类型",
                      "id": 50
                    },
                    "2": {
                      "title": "nil",
                      "id": 51,
                      "ideas": {
                        "1": {
                          "title": "nil和OC中nil的区别",
                          "id": 52
                        }
                      }
                    }
                  }
                },
                "2": {
                  "title": "浮点数",
                  "id": 43
                },
                "3": {
                  "title": "数值形字面量",
                  "id": 44,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "* 一个十进制数, 没有前缀<div>* 一个二进制数, 前缀是0b</div><div>* 一个八进制数, 前缀是0o</div><div>* 一个十六进制数, 前缀是0x</div>"
                    },
                    "style": {}
                  }
                },
                "4": {
                  "title": "类型转换",
                  "id": 45
                },
                "5": {
                  "title": "类型别名",
                  "id": 46
                },
                "6": {
                  "title": "布尔值",
                  "id": 47
                },
                "38": {
                  "title": "元组(Tuples)",
                  "id": 48,
                  "attr": {
                    "style": {},
                    "attachment": {
                      "contentType": "text/html",
                      "content": "为何会设计元祖这个概念?<div><br></div><div>函数要返回复杂的数据类型, 简化他, 不用结构体,或者类, 使用元组</div>"
                    }
                  }
                },
                "48": {
                  "title": "字符和字符串",
                  "id": 49,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "## 课程目标<div>* Swift的字符和字符串学习</div><div><br></div><div>## 重点难点</div><div>* 理解Swift字符串是值类型</div><div>* 什么是值类型和引用类型?</div><div><br></div><div>## 课后练习<br>* 课程Demo</div>"
                    },
                    "style": {},
                    "collapsed": true
                  },
                  "ideas": {
                    "1": {
                      "title": "为何字符串也是基本类型呢, 因为Swift中字符串是值类型",
                      "id": 71
                    },
                    "2": {
                      "title": "什么是值类型? 什么是引用类型?",
                      "id": 72
                    }
                  }
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 学会基本类型使用: 整数, 浮点, 布尔</div><div><br></div><div>## 重点难点</div><div><br></div><div>## 课后练习</div><div>* 课程Demo</div>"
                },
                "style": {},
                "collapsed": true
              }
            },
            "5": {
              "title": "3.5 集合类型CollectionType",
              "id": 62,
              "ideas": {
                "1": {
                  "title": "数组Arrays",
                  "id": 63,
                  "ideas": {
                    "1": {
                      "title": "数组定义",
                      "id": 65
                    },
                    "2": {
                      "title": "数组访问",
                      "id": 66
                    },
                    "3": {
                      "title": "遍历数组",
                      "id": 67
                    }
                  }
                },
                "2": {
                  "title": "字典(Dictionaries)",
                  "id": 64,
                  "ideas": {
                    "1": {
                      "title": "字典定义",
                      "id": 68
                    },
                    "2": {
                      "title": "字典取值",
                      "id": 69
                    },
                    "3": {
                      "title": "字典遍历",
                      "id": 70
                    }
                  },
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "Dictionary&lt;KeyType, ValueType&gt;<div><br></div><div>KeyType唯一限制是可哈希(Hash)的, 保证唯一性, 基本类型都是可以的.</div>"
                    },
                    "style": {}
                  }
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "Array: 可变; 不要求唯一性, 一维到多维.<div>Dictionary: 不可变; 要求Key唯一, 二维.</div>"
                },
                "style": {},
                "collapsed": true
              }
            },
            "6": {
              "title": "3.7 函数(Functions)",
              "id": 88,
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 学会使用Swift中的函数, 清晰的定义函数, 调用函数, 了解函数各类参数和返回值特点.</div><div><br></div><div>## 重点难点</div><div>* 对inout参数理解, 函数类型和函数嵌套的理解, 对比别的语言.</div><div><br></div><div>## 课后练习</div><div>* 课程Demo</div>"
                },
                "style": {},
                "collapsed": true
              },
              "ideas": {
                "1": {
                  "title": "函数定义与调用",
                  "id": 89
                },
                "2": {
                  "title": "函数参数与返回值",
                  "id": 90,
                  "ideas": {
                    "1": {
                      "title": "多参数",
                      "id": 92
                    },
                    "2": {
                      "title": "无参数和无返回值",
                      "id": 93
                    },
                    "3": {
                      "title": "多返回值",
                      "id": 94
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "3": {
                  "title": "函数参数名称",
                  "id": 91,
                  "ideas": {
                    "1": {
                      "title": "普通参数",
                      "id": 95
                    },
                    "2": {
                      "title": "外部参数名称",
                      "id": 96,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "ExternalParam Param: Type"
                        },
                        "style": {}
                      }
                    },
                    "3": {
                      "title": "默认参数",
                      "id": 97
                    },
                    "4": {
                      "title": "默认值参数的外部参数",
                      "id": 98
                    },
                    "5": {
                      "title": "可变参数",
                      "id": 99
                    },
                    "6": {
                      "title": "输入输出参数",
                      "id": 100
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "4": {
                  "title": "函数类型",
                  "id": 101,
                  "ideas": {
                    "1": {
                      "title": "在Swift中函数是有类型一说的",
                      "id": 102,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "func addTwoInts(a: Int, b: Int) -&gt; Int {<div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>return a + b</div></blockquote></div><div>}</div><div>函数类型是(int, int)-&gt;int</div><div>其他返回类型, 比如 () -&gt; ()</div>"
                        },
                        "style": {}
                      }
                    },
                    "2": {
                      "title": "相同类型函数可以赋值",
                      "id": 103
                    },
                    "3": {
                      "title": "函数类型作为参数和返回值",
                      "id": 104
                    },
                    "4": {
                      "title": "嵌套函数(Nested Functions)",
                      "id": 105
                    }
                  },
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "## 课程目标<div>* 学习函数的高级内容, 包括函数类型, 函数类型参数和返回值, 嵌套函数等.</div><div><br></div><div>## 重点难点</div><div>* 理解为何会有函数类型的概念, 函数类型参数和返回值用在哪儿.</div><div><br></div><div>## 课后练习</div><div>* 课程Demo</div>"
                    },
                    "style": {},
                    "collapsed": true
                  }
                },
                "5": {
                  "title": "函数嵌套",
                  "id": 106
                }
              }
            },
            "7": {
              "title": "3.8 闭包(Closures)",
              "id": 107,
              "ideas": {
                "1": {
                  "title": "语法表达式",
                  "id": 108,
                  "ideas": {
                    "1": {
                      "title": "作为上下文推断类型",
                      "id": 109,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "sort(names, {s1, s2 in return s1 &gt; s2})"
                        },
                        "style": {}
                      }
                    },
                    "2": {
                      "title": "单行表达式隐式返回",
                      "id": 110,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "sort(names, {s1, s2 in s1 &gt; s2})"
                        },
                        "style": {}
                      }
                    },
                    "3": {
                      "title": "参数名称缩写",
                      "id": 111,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "sort(names, {$0 &gt; $1})"
                        },
                        "style": {}
                      }
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 闭包表达式的学习, 掌握基本使用, 能看懂代码.</div><div><br></div><div>## 重点难点</div><div>* 闭包的表达式使用, 能看懂</div><div>* 闭包是引用类型</div><div><br></div><div>## 课后练习</div><div>* 课程Demo(sort)</div>"
                },
                "style": {},
                "collapsed": true
              }
            },
            "8": {
              "title": "3.9 枚举(Enumerations)",
              "id": 112,
              "ideas": {
                "1": {
                  "title": "枚举语法",
                  "id": 113,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "enum Name{<div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case Value1</div><div>case Value2</div></blockquote></div><div>}</div>"
                    },
                    "style": {}
                  }
                },
                "2": {
                  "title": "匹配枚举值和Swift语句",
                  "id": 114
                },
                "3": {
                  "title": "实例值",
                  "id": 115
                },
                "4": {
                  "title": "原始值",
                  "id": 116
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 枚举表达式</div><div><br></div><div>## 重点难点</div><div>* 实例值</div><div>* 原始值</div><div><br></div><div>## 课后练习</div><div>* 课程Demo</div>"
                },
                "style": {},
                "collapsed": true
              }
            }
          },
          "attr": {
            "style": {},
            "position": [
              136.5,
              -136.5,
              1
            ],
            "collapsed": true
          }
        },
        "2": {
          "title": "2. 面向过程-算法",
          "id": 21,
          "ideas": {
            "1": {
              "title": "3.4 基本运算符",
              "id": 54,
              "ideas": {
                "1": {
                  "title": "赋值运算符",
                  "id": 56
                },
                "2": {
                  "title": "数值运算符",
                  "id": 57
                },
                "3": {
                  "title": "比较运算符",
                  "id": 58
                },
                "4": {
                  "title": "三元运算符",
                  "id": 59,
                  "ideas": {
                    "1": {
                      "title": "? :",
                      "id": 61
                    }
                  }
                },
                "5": {
                  "title": "逻辑运算符",
                  "id": 60
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 了解Swift的基本运算符</div><div><br></div><div>## 重点难点</div><div><br></div><div>## 课后练习</div><div>* 掌握课程Demo即可</div>"
                },
                "style": {},
                "collapsed": true
              }
            },
            "2": {
              "title": "3.6 控制流(Control Flow)",
              "id": 55,
              "ideas": {
                "1": {
                  "title": "循环",
                  "id": 73,
                  "ideas": {
                    "1": {
                      "title": "for in",
                      "id": 76
                    },
                    "2": {
                      "title": "for 条件递增",
                      "id": 77
                    },
                    "3": {
                      "title": "while",
                      "id": 78
                    },
                    "4": {
                      "title": "repeat while",
                      "id": 79
                    }
                  }
                },
                "2": {
                  "title": "条件语句",
                  "id": 74,
                  "ideas": {
                    "1": {
                      "title": "if then",
                      "id": 80
                    },
                    "2": {
                      "title": "switch case",
                      "id": 81,
                      "ideas": {
                        "1": {
                          "title": "区间匹配和元组",
                          "id": 82
                        }
                      }
                    }
                  }
                },
                "3": {
                  "title": "控制传递",
                  "id": 75,
                  "ideas": {
                    "1": {
                      "title": "continue",
                      "id": 83
                    },
                    "2": {
                      "title": "break",
                      "id": 84
                    },
                    "3": {
                      "title": "fallthrough",
                      "id": 85
                    },
                    "4": {
                      "title": "label",
                      "id": 86
                    }
                  }
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 了解Swift的循环, 判断, 条件语句</div><div><br></div><div>## 重点难点</div><div><br></div><div>## 课后练习</div><div>* 掌握课程Demo即可</div>"
                },
                "style": {},
                "collapsed": true
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "3": {
          "title": "3. 面向对象-数据结构",
          "id": 53,
          "ideas": {
            "1": {
              "title": "3.10 类(Class)",
              "id": 117,
              "ideas": {
                "1": {
                  "title": "类的定义",
                  "id": 119
                },
                "2": {
                  "title": "类是值类型还是引用类型",
                  "id": 120,
                  "ideas": {
                    "1": {
                      "title": "是引用类型",
                      "id": 134
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "3": {
                  "title": "恒等式",
                  "id": 121,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "恒等式是判断两个变量或者常量是否引用同一个实例<div><br></div><div>===</div><div>!==</div>"
                    },
                    "style": {}
                  }
                },
                "4": {
                  "title": "关于指针",
                  "id": 122,
                  "ideas": {
                    "1": {
                      "title": "没有指针类型, 但引用实际上是指针",
                      "id": 135
                    },
                    "2": {
                      "title": "没有提供指针的语法",
                      "id": 136
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "5": {
                  "title": "类的构造",
                  "id": 123,
                  "ideas": {
                    "1": {
                      "title": "构造函数 init",
                      "id": 137
                    },
                    "2": {
                      "title": "析构函数 deinit不带参数和括号",
                      "id": 138
                    },
                    "3": {
                      "title": "给属性赋初值",
                      "id": 139
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "6": {
                  "title": "类的继承(inheritance)",
                  "id": 124,
                  "ideas": {
                    "1": {
                      "title": "子类继承父类的定义",
                      "id": 125
                    },
                    "2": {
                      "title": "构造函数修改以及访问父类的属性和方法",
                      "id": 126
                    },
                    "3": {
                      "title": "重写(Overriding)",
                      "id": 127,
                      "ideas": {
                        "1": {
                          "title": "重写方法",
                          "id": 128,
                          "attr": {
                            "style": {}
                          }
                        },
                        "2": {
                          "title": "重写属性",
                          "id": 130
                        },
                        "3": {
                          "title": "重写属性观察器",
                          "id": 131
                        },
                        "4": {
                          "title": "防止重写",
                          "id": 132
                        }
                      },
                      "attr": {
                        "style": {},
                        "collapsed": true
                      }
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 对比别的语言, 学会Swift的类的写法</div><div><br></div><div>## 重点难点</div><div>* Swift中的类不用写在一个单独的文件里</div><div>* Swift中磊和结构体的异同点</div><div><br></div><div>## 课后练习</div><div>* 编写自己的类</div>"
                },
                "style": {},
                "collapsed": true
              }
            },
            "2": {
              "title": "3.11 结构体(Structure)",
              "id": 118,
              "ideas": {
                "1": {
                  "title": "结构体的定义",
                  "id": 133
                },
                "2": {
                  "title": "结构体的构造函数",
                  "id": 140
                },
                "3": {
                  "title": "结构体是值类型",
                  "id": 141
                },
                "4": {
                  "title": "了解结构体和类的选择",
                  "id": 142,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "## 相同点<div>1. 都是有内部变量和函数</div><div>2. 都可以有内部下标方式去取属性</div><div>3. 都可以有初始化函数</div><div>4. 都可以用协议</div><div><br></div><div>## 不同点</div><div>1. 类有继承</div><div>2. 类可以多重引用</div><div>3. 类有析构</div><div><br></div><div>简单的用struct, 复杂的用class</div>"
                    },
                    "style": {}
                  }
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 对比别的语言, 学会Swift的结构的写法</div><div><br></div><div>## 重点难点</div><div>* Swift中类和结构体的异同点</div><div>* 结构体是值类型</div><div><br></div><div>## 课后练习</div><div>* 编写自己的类</div>"
                },
                "style": {},
                "collapsed": true
              }
            },
            "3": {
              "title": "3.12 协议(Protocol)",
              "id": 143,
              "ideas": {
                "1": {
                  "title": "语法",
                  "id": 145,
                  "ideas": {
                    "1": {
                      "title": "属性和方法的定义及实现",
                      "id": 149
                    },
                    "2": {
                      "title": "有父类的时候",
                      "id": 150
                    }
                  }
                },
                "2": {
                  "title": "协议类型",
                  "id": 146,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "## 使用场景<div>* 作为函数, 方法或构造器中的参数类型, 返回值类型</div><div>* 作为常量, 变量, 属性的类型</div><div>* 作为数组, 字典或其他容器中的元素类型</div>"
                    },
                    "style": {}
                  }
                },
                "3": {
                  "title": "协议继承",
                  "id": 147
                },
                "4": {
                  "title": "协议合成",
                  "id": 148
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 课程目标<div>* 了解协议的概念, 熟悉语法</div><div><br></div><div>## 重点难点</div><div><br></div><div>## 课后练习</div><div>* 编写自己的协议</div>"
                },
                "style": {},
                "collapsed": true
              }
            },
            "4": {
              "title": "3.13 泛型",
              "id": 151,
              "ideas": {
                "1": {
                  "title": "函数泛型",
                  "id": 152
                },
                "2": {
                  "title": "类泛型",
                  "id": 153
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "## 泛型所解决的问题<div>这里是一个标准的, 非泛型函数</div><div><br></div><div>func swapTwoInts(inout a: Int, inout b: Int) {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>let temporaryA = a</div><div>a = b</div><div>b = temporaryA</div></blockquote></div><div>}</div>"
                },
                "style": {}
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "4": {
          "title": "4. 面向对象-算法",
          "id": 144,
          "attr": {}
        }
      },
      "attr": {
        "style": {},
        "collapsed": true
      }
    }
  },
  "links": []
}